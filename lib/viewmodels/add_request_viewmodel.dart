import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:latlong2/latlong.dart';

import '../models/request_model.dart';
import '../utils/localization_manager.dart';
import 'package:provider/provider.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

class AddRequestViewModel extends ChangeNotifier {
  // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  final TextEditingController requesterNameController = TextEditingController();
  final TextEditingController operatorNameController = TextEditingController();
  final TextEditingController operatorPhoneController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController permitNumberController = TextEditingController();
  final TextEditingController contractNumberController = TextEditingController();
  final TextEditingController noteController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController latLngController = TextEditingController();
  final TextEditingController radiusController = TextEditingController();
  final TextEditingController flightHeightController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤—ã—Å–æ—Ç—ã –ø–æ–ª–µ—Ç–∞
  final TextEditingController startDateController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
  final TextEditingController flightStartDateControllerTime = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø–æ–ª–µ—Ç–∞
  final TextEditingController flightEndDateTimeController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–ª–µ—Ç–∞
  final TextEditingController permitDateController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–∞—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  final TextEditingController contractDateController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–∞—Ç—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

  // –°–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –ø–æ–ª–µ–π
  final List<String> models = ["–ú–æ–¥–µ–ª—å 1", "–ú–æ–¥–µ–ª—å 2", "–ú–æ–¥–µ–ª—å 3"];
  final List<String> regions = ["–¢–∞—à–∫–µ–Ω—Ç", "–°–∞–º–∞—Ä–∫–∞–Ω–¥", "–ë—É—Ö–∞—Ä–∞"];
  final List<String> purposes = ["–¢—É—Ä–∏–∑–º", "–ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"];
  final List<String> flightSigns = ["–ó–Ω–∞–∫ 1", "–ó–Ω–∞–∫ 2", "–ó–Ω–∞–∫ 3"];


  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
  DateTime? startDate;
  DateTime? endDate;
  DateTime? flightStartDateTime;
  DateTime? flightEndDateTime;
  DateTime? permitDate;
  DateTime? contractDate;

  // –ü–æ–ª—è –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
  String? selectedModel;
  String? selectedRegion;
  String? selectedPurpose;
  String? selectedFlightSign;

  String selectedCountryCode = "+998";

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
  final List<Map<String, String>> countries = [
    {"code": "+998", "flag": "üá∫üáø"},
    {"code": "+1", "flag": "üá∫üá∏"},
    {"code": "+44", "flag": "üá¨üáß"},
    {"code": "+7", "flag": "üá∑üá∫"},
    {"code": "+997", "flag": "üá∞üáø"},
  ];



  String formatPhoneNumber(String phoneNumber) {
    final countryCode = '+998';
    if (phoneNumber.startsWith(countryCode)) {
      return phoneNumber.replaceFirst(countryCode, '').trim();
    }
    return phoneNumber;
  }

  void updateCountryCode(String code) {
    selectedCountryCode = code;
    phoneController.clear();
    notifyListeners();
  }

  void updateDateField(DateTime date, TextEditingController controller) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    controller.text = DateFormat('dd.MM.yyyy').format(date);
    notifyListeners(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  }


  void updateCoordinatesAndRadius(LatLng coordinates, double? radius) {
    latLngController.text = '${coordinates.latitude.toStringAsFixed(5)} ${coordinates.longitude.toStringAsFixed(5)}';
    radiusController.text = radius != null ? radius.toStringAsFixed(0) : '';
    notifyListeners();
  }

  // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã
  void updateStartDate(DateTime date) {
    startDate = date;
    startDateController.text = DateFormat('dd.MM.yyyy').format(date);
    notifyListeners();
  }

  void updateFlightStartDateTime(DateTime date) {
    flightStartDateTime = date;
    flightStartDateControllerTime.text = DateFormat('dd.MM.yyyy HH:mm').format(date);
    notifyListeners();
  }

  void updateFlightEndDateTime(DateTime date) {
    flightEndDateTime = date;
    flightEndDateTimeController.text = DateFormat('dd.MM.yyyy HH:mm').format(date);
    notifyListeners();
  }

  void updatePermitDate(DateTime date) {
    permitDate = date;
    permitDateController.text = DateFormat('dd.MM.yyyy').format(date);
    notifyListeners();
  }

  void updateContractDate(DateTime date) {
    contractDate = date;
    contractDateController.text = DateFormat('dd.MM.yyyy').format(date);
    notifyListeners();
  }

  void setModel(String model) {
    selectedModel = model;
    notifyListeners();
  }

  void setRegion(String region) {
    selectedRegion = region;
    notifyListeners();
  }

  void setPurpose(String purpose) {
    selectedPurpose = purpose;
    notifyListeners();
  }


  void setFlightSign(String flightSign) {
    selectedFlightSign = flightSign;
    notifyListeners();
  }



  String? submitRequest(BuildContext context) {
    final localizations = AppLocalizations.of(context);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
    if (startDate == null) {
      return localizations?.invalidStartDate;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—è
    if (requesterNameController.text.isEmpty) {
      return localizations?.invalidRequesterName;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
    if (selectedModel == null || selectedModel!.isEmpty) {
      return localizations?.invalidModel;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–∫–∞ –ø–æ–ª–µ—Ç–∞
    if (selectedFlightSign == null || selectedFlightSign!.isEmpty) {
      return localizations?.invalidFlightSign;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø–æ–ª–µ—Ç–∞
    if (flightStartDateTime == null) {
      return localizations?.invalidFlightStartDateTime;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–ª–µ—Ç–∞
    if (flightEndDateTime == null) {
      return localizations?.invalidFlightEndDateTime;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª–µ—Ç–∞
    if (selectedRegion == null || selectedRegion!.isEmpty) {
      return localizations?.invalidRegion;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    List<String> latLngParts = latLngController.text.split(" ");
    if (latLngParts.length != 2) {
      return localizations?.invalidLatLngFormat;
    }

    double? latitude = double.tryParse(latLngParts[0]);
    double? longitude = double.tryParse(latLngParts[1]);
    if (latitude == null || longitude == null) {
      return localizations?.invalidLatitudeLongitude;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ—Ç—ã –ø–æ–ª–µ—Ç–∞
    double? flightHeight = double.tryParse(flightHeightController.text);
    if (flightHeight == null) {
      return localizations?.invalidFlightHeight;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–¥–∏—É—Å–∞
    double? radius = double.tryParse(radiusController.text);
    if (radius == null) {
      return localizations?.invalidRadius;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏ –ø–æ–ª–µ—Ç–∞
    if (selectedPurpose == null || selectedPurpose!.isEmpty) {
      return localizations?.invalidPurpose;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (operatorNameController.text.isEmpty) {
      return localizations?.invalidOperatorName;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    int? contractNumber = int.tryParse(contractNumberController.text);
    if (contractNumber == null) {
      return localizations?.invalidContractNumber;
    }


    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    String email = emailController.text;
    if (email.isEmpty || !RegExp(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$").hasMatch(email)) {
      return localizations?.invalidEmail;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    int? permitNumber = int.tryParse(permitNumberController.text);
    if (permitNumber == null) {
      return localizations?.invalidPermitNumber;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if (permitDate == null) {
      return localizations?.invalidPermitDate;
    }


    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    if (contractDate == null) {
      return localizations?.invalidContractDate;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    String phoneNumber = "$selectedCountryCode ${phoneController.text}";
    if (phoneController.text.isEmpty || phoneController.text.length < 7) {
      return localizations?.invalidPhoneNumber;
    }



    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ context.read
    String lang = context.read<LocalizationManager>().currentLocale.languageCode;

    RequestModel requestModel = RequestModel(
      requesterName: requesterNameController.text,
      operatorName: operatorNameController.text,
      operatorPhone: phoneNumber,
      email: email,
      permitNumber: permitNumber.toString(),
      contractNumber: contractNumber.toString(),
      note: noteController.text,
      model: selectedModel,
      region: selectedRegion,
      purpose: selectedPurpose,
      latitude: latitude,
      longitude: longitude,
      radius: radius,
      startDate: startDate,
      flightStartDateTime: flightStartDateTime,
      flightEndDateTime: flightEndDateTime,
      permitDate: permitDate,
      contractDate: contractDate,
      flightSign: selectedFlightSign, // –î–æ–±–∞–≤–ª–µ–Ω –∑–Ω–∞–∫ –ø–æ–ª–µ—Ç–∞
      lang: lang, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
    );

    print("Submitting request: ${requestModel.toJson()}");

    return null; // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }



  void clearFields() {
    requesterNameController.clear();
    operatorNameController.clear();
    operatorPhoneController.clear();
    emailController.clear();
    permitNumberController.clear();
    contractNumberController.clear();
    noteController.clear();
    phoneController.clear();
    latLngController.clear();
    radiusController.clear();
    flightHeightController.clear();
    startDateController.clear();
    flightStartDateControllerTime.clear();
    flightEndDateTimeController.clear();
    permitDateController.clear();
    contractDateController.clear();

    startDate = null;
    endDate = null;
    flightStartDateTime = null;
    flightEndDateTime = null;
    permitDate = null;
    contractDate = null;
    selectedModel = null;
    selectedRegion = null;
    selectedPurpose = null;
    notifyListeners();
  }

  @override
  void dispose() {
    requesterNameController.dispose();
    operatorNameController.dispose();
    operatorPhoneController.dispose();
    emailController.dispose();
    permitNumberController.dispose();
    contractNumberController.dispose();
    noteController.dispose();
    phoneController.dispose();
    latLngController.dispose();
    radiusController.dispose();
    flightHeightController.dispose();
    startDateController.dispose();
    flightStartDateControllerTime.dispose();
    flightEndDateTimeController.dispose();
    permitDateController.dispose();
    contractDateController.dispose();
    super.dispose();
  }
}
