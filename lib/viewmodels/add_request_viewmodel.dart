import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:latlong2/latlong.dart';

class AddRequestViewModel extends ChangeNotifier {
  // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  final TextEditingController requesterNameController = TextEditingController();
  final TextEditingController operatorNameController = TextEditingController(text: "–ó–∞–∫–∏—Ä–æ–≤ –ê—Å–ª–∏–¥–¥–∏–Ω –¢–µ–º—É—Ä–æ–≤–∏—á");
  final TextEditingController operatorPhoneController = TextEditingController(text: "+998 ");
  final TextEditingController emailController = TextEditingController(text: "sample@gmail.com");
  final TextEditingController permitNumberController = TextEditingController();
  final TextEditingController contractNumberController = TextEditingController();
  final TextEditingController noteController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController latLngController = TextEditingController();
  final TextEditingController radiusController = TextEditingController();
  final TextEditingController flightHeightController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤—ã—Å–æ—Ç—ã –ø–æ–ª–µ—Ç–∞
  final TextEditingController startDateController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
  final TextEditingController flightStartDateControllerTime = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø–æ–ª–µ—Ç–∞
  final TextEditingController flightEndDateTimeController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–ª–µ—Ç–∞
  final TextEditingController permitDateController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–∞—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  final TextEditingController contractDateController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–∞—Ç—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

  // –°–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –ø–æ–ª–µ–π
  final List<String> models = ["–ú–æ–¥–µ–ª—å 1", "–ú–æ–¥–µ–ª—å 2", "–ú–æ–¥–µ–ª—å 3"];
  final List<String> regions = ["–¢–∞—à–∫–µ–Ω—Ç", "–°–∞–º–∞—Ä–∫–∞–Ω–¥", "–ë—É—Ö–∞—Ä–∞"];
  final List<String> purposes = ["–¢—É—Ä–∏–∑–º", "–ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"];
  final List<String> flightSigns = ["–ó–Ω–∞–∫ 1", "–ó–Ω–∞–∫ 2", "–ó–Ω–∞–∫ 3"];


  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
  DateTime? startDate;
  DateTime? endDate;
  DateTime? flightStartDateTime;
  DateTime? flightEndDateTime;
  DateTime? permitDate;
  DateTime? contractDate;

  // –ü–æ–ª—è –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
  String? selectedModel;
  String? selectedRegion;
  String? selectedPurpose;

  String selectedCountryCode = "+998";

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
  final List<Map<String, String>> countries = [
    {"code": "+998", "flag": "üá∫üáø"},
    {"code": "+1", "flag": "üá∫üá∏"},
    {"code": "+44", "flag": "üá¨üáß"},
    {"code": "+7", "flag": "üá∑üá∫"},
    {"code": "+997", "flag": "üá∞üáø"},
  ];

  AddRequestViewModel() {
    phoneController.text = formatPhoneNumber("+998 99 333 11 22");
  }

  String formatPhoneNumber(String phoneNumber) {
    final countryCode = '+998';
    if (phoneNumber.startsWith(countryCode)) {
      return phoneNumber.replaceFirst(countryCode, '').trim();
    }
    return phoneNumber;
  }

  void updateCountryCode(String code) {
    selectedCountryCode = code;
    phoneController.clear();
    notifyListeners();
  }

  void updateDateField(DateTime date, TextEditingController controller) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    controller.text = DateFormat('dd.MM.yyyy').format(date);
    notifyListeners(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  }


  void updateCoordinatesAndRadius(LatLng coordinates, double? radius) {
    latLngController.text = '${coordinates.latitude.toStringAsFixed(5)} ${coordinates.longitude.toStringAsFixed(5)}';
    radiusController.text = radius != null ? radius.toStringAsFixed(0) : '';
    notifyListeners();
  }

  // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã
  void updateStartDate(DateTime date) {
    startDate = date;
    startDateController.text = DateFormat('dd.MM.yyyy').format(date);
    notifyListeners();
  }

  void updateFlightStartDateTime(DateTime date) {
    flightStartDateTime = date;
    flightStartDateControllerTime.text = DateFormat('dd.MM.yyyy HH:mm').format(date);
    notifyListeners();
  }

  void updateFlightEndDateTime(DateTime date) {
    flightEndDateTime = date;
    flightEndDateTimeController.text = DateFormat('dd.MM.yyyy HH:mm').format(date);
    notifyListeners();
  }

  void updatePermitDate(DateTime date) {
    permitDate = date;
    permitDateController.text = DateFormat('dd.MM.yyyy').format(date);
    notifyListeners();
  }

  void updateContractDate(DateTime date) {
    contractDate = date;
    contractDateController.text = DateFormat('dd.MM.yyyy').format(date);
    notifyListeners();
  }

  void setModel(String model) {
    selectedModel = model;
    notifyListeners();
  }

  void setRegion(String region) {
    selectedRegion = region;
    notifyListeners();
  }

  void setPurpose(String purpose) {
    selectedPurpose = purpose;
    notifyListeners();
  }

  void submitRequest() {
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print("Submitting request");
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
    clearFields();
  }

  void clearFields() {
    requesterNameController.clear();
    operatorNameController.clear();
    operatorPhoneController.clear();
    emailController.clear();
    permitNumberController.clear();
    contractNumberController.clear();
    noteController.clear();
    phoneController.clear();
    latLngController.clear();
    radiusController.clear();
    flightHeightController.clear();
    startDateController.clear();
    flightStartDateControllerTime.clear();
    flightEndDateTimeController.clear();
    permitDateController.clear();
    contractDateController.clear();

    startDate = null;
    endDate = null;
    flightStartDateTime = null;
    flightEndDateTime = null;
    permitDate = null;
    contractDate = null;
    selectedModel = null;
    selectedRegion = null;
    selectedPurpose = null;
    notifyListeners();
  }

  @override
  void dispose() {
    requesterNameController.dispose();
    operatorNameController.dispose();
    operatorPhoneController.dispose();
    emailController.dispose();
    permitNumberController.dispose();
    contractNumberController.dispose();
    noteController.dispose();
    phoneController.dispose();
    latLngController.dispose();
    radiusController.dispose();
    flightHeightController.dispose();
    startDateController.dispose();
    flightStartDateControllerTime.dispose();
    flightEndDateTimeController.dispose();
    permitDateController.dispose();
    contractDateController.dispose();
    super.dispose();
  }
}
